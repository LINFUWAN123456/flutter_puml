@startuml
set namespaceSeparator ::

abstract class "flutter::lib::src::widgets::scroll_position.dart::ScrollPosition" {
  +ScrollPhysics physics
  +ScrollContext context
  +bool keepScrollOffset
  +String? debugLabel
  -double? _minScrollExtent
  -double? _maxScrollExtent
  -double _impliedVelocity
  -double? _pixels
  -double? _viewportDimension
  -bool _haveDimensions
  -bool _didChangeViewportDimensionOrReceiveCorrection
  -bool _pendingDimensions
  -ScrollMetrics? _lastMetrics
  -bool _haveScheduledUpdateNotification
  -dynamic _lastAxis
  -Set<dynamic>? _semanticActions
  +dynamic isScrollingNotifier
  -ScrollActivity? _activity
  +double minScrollExtent
  +double maxScrollExtent
  +bool hasContentDimensions
  +double pixels
  +bool hasPixels
  +double viewportDimension
  +bool hasViewportDimension
  +bool haveDimensions
  +bool allowImplicitScrolling
  +ScrollActivity? activity
  +void absorb()
  +double setPixels()
  +void correctPixels()
  +void correctBy()
  +void forcePixels()
  +void saveScrollOffset()
  +void restoreScrollOffset()
  +void restoreOffset()
  +void saveOffset()
  +double applyBoundaryConditions()
  +bool applyViewportDimension()
  -bool _isMetricsChanged()
  +bool applyContentDimensions()
  +bool correctForNewDimensions()
  +void applyNewDimensions()
  -void _updateSemanticActions()
  +Future<void> ensureVisible()
  +Future<void> animateTo()
  +void jumpTo()
  +void pointerScroll()
  +Future<void> moveTo()
  +void jumpToWithoutSettling()
  +ScrollHoldController hold()
  +dynamic drag()
  +void beginActivity()
  +void didStartScroll()
  +void didUpdateScrollPositionBy()
  +void didEndScroll()
  +void didOverscrollBy()
  +void didUpdateScrollDirection()
  +void didUpdateScrollMetrics()
  +bool recommendDeferredLoading()
  +void dispose()
  +void notifyListeners()
  +void debugFillDescription()
}

"flutter::lib::src::widgets::scroll_position.dart::ScrollPosition" o-- "flutter::lib::src::widgets::scroll_physics.dart::ScrollPhysics"
"flutter::lib::src::widgets::scroll_position.dart::ScrollPosition" o-- "flutter::lib::src::widgets::scroll_context.dart::ScrollContext"
"flutter::lib::src::widgets::scroll_position.dart::ScrollPosition" o-- "flutter::lib::src::widgets::scroll_metrics.dart::ScrollMetrics"
"flutter::lib::src::widgets::scroll_position.dart::ScrollPosition" o-- "flutter::lib::src::widgets::scroll_activity.dart::ScrollActivity"
"flutter::lib::src::widgets::scroll_metrics.dart::ScrollMetrics" <|-- "flutter::lib::src::widgets::scroll_position.dart::ScrollPosition"

class "flutter::lib::src::widgets::scroll_position.dart::ScrollMetricsNotification" {
  +ScrollMetrics metrics
  +BuildContext context
  +void debugFillDescription()
}

"flutter::lib::src::widgets::scroll_position.dart::ScrollMetricsNotification" o-- "flutter::lib::src::widgets::scroll_metrics.dart::ScrollMetrics"
"flutter::lib::src::widgets::scroll_position.dart::ScrollMetricsNotification" o-- "flutter::lib::src::widgets::framework.dart::BuildContext"
"flutter::lib::src::widgets::notification_listener.dart::Notification" <|-- "flutter::lib::src::widgets::scroll_position.dart::ScrollMetricsNotification"
"flutter::lib::src::widgets::scroll_notification.dart::ViewportNotificationMixin" <|-- "flutter::lib::src::widgets::scroll_position.dart::ScrollMetricsNotification"

class "flutter::lib::src::widgets::scroll_position.dart::ScrollPositionAlignmentPolicy" {
  +int index
  {static} +List<ScrollPositionAlignmentPolicy> values
  {static} +ScrollPositionAlignmentPolicy explicit
  {static} +ScrollPositionAlignmentPolicy keepVisibleAtEnd
  {static} +ScrollPositionAlignmentPolicy keepVisibleAtStart
}

"flutter::lib::src::widgets::scroll_position.dart::ScrollPositionAlignmentPolicy" o-- "flutter::lib::src::widgets::scroll_position.dart::ScrollPositionAlignmentPolicy"
"dart::core::Enum" <|-- "flutter::lib::src::widgets::scroll_position.dart::ScrollPositionAlignmentPolicy"


@enduml